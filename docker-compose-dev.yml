services:
  nginx:
    image: nginx:1.27.2
    networks:
      front-net:
    restart: always
    ports:
      - 8080:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf

  frontend1:
    image: dbgurum/guestbook:frontend_1.0
    networks:
      front-net:
    restart: always
    environment:
      port: 8000
      GUESTBOOK_API_ADDR: haproxy:8000
      IMAGE_SERVER_URI: https://image-server.asordk.synology.me
    volumes:
      - ./frontend/:/frontend
  frontend2:
    image: dbgurum/guestbook:frontend_1.0
    networks:
      front-net:
    restart: always
    volumes:
      - ./frontend/:/frontend
    environment:
      port: 8000
      GUESTBOOK_API_ADDR: haproxy:8000
      IMAGE_SERVER_URI: https://image-server.asordk.synology.me
  frontend3:
    image: dbgurum/guestbook:frontend_1.0
    networks:
      front-net:
    restart: always
    volumes:
      - ./frontend/:/frontend
    environment:
      port: 8000
      GUESTBOOK_API_ADDR: haproxy:8000
      IMAGE_SERVER_URI: https://image-server.asordk.synology.me

  haproxy:
    image: haproxytech/haproxy-alpine:2.4
    networks:
      front-net:
      back-net:
    restart: always
    ports:
      - 8404:8404
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg

  backend1:
    image: dbgurum/guestbook:backend_1.0
    networks:
      back-net:
    restart: always
    volumes:
      - ./backend:/backend
    environment:
      PORT: 8000
      GUESTBOOK_DB_ADDR: database:27017
    depends_on:
      - database
  backend2:
    image: dbgurum/guestbook:backend_1.0
    networks:
      back-net:
    restart: always
    volumes:
      - ./backend:/backend
    environment:
      PORT: 8000
      GUESTBOOK_DB_ADDR: database:27017
    depends_on:
      - database
  backend3:
    image: dbgurum/guestbook:backend_1.0
    networks:
      back-net:
    restart: always
    volumes:
      - ./backend:/backend
    environment:
      PORT: 8000
      GUESTBOOK_DB_ADDR: database:27017
    depends_on:
      - database

  backend-java:
    build:
      context: ./backend-java/
    networks:
      back-net:
    volumes:
      - .:/app
    ports:
      - 19999:19999
    environment:
      MONGO_DB_HOST: database
    depends_on:
      database:
        condition: service_healthy

  database:
    image: mongo:4.0
    networks:
      back-net:
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    
networks:
  front-net:
    driver: bridge
  back-net:
    driver: bridge

volumes:
  mongo-data:
