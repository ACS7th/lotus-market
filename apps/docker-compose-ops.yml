services:
  nginx:
    build:
      context: ./nginx/
    image: 192.168.0.30:5000/lotus/nginx:1.1
    networks:
      - front-net
    ports:
      - 8080:80
    deploy:
      placement:
        constraints:
          - node.hostname != swarm-manager

  frontend:
    build:
      context: ./frontend/
    image: 192.168.0.30:5000/lotus/frontend:1.1
    networks:
      - front-net
    environment:
      PORT: 8000
      GUESTBOOK_API_ADDR: haproxy:8000
      IMAGE_SERVER_URI: https://image-server.asordk.synology.me
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
      placement:
        constraints:
          - node.hostname != swarm-manager

  haproxy:
    build:
      context: ./haproxy/
    image: 192.168.0.30:5000/lotus/haproxy-lot:1.2
    networks:
      - front-net
      - back-net
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.hostname == swarm-manager

  backend:
    build:
      context: ./backend/
    image: 192.168.0.30:5000/lotus/backend:1.1
    networks:
      - back-net
    environment:
      PORT: 8000
      GUESTBOOK_DB_ADDR: database:27017
    depends_on:
      - database
    deploy:
      replicas: 5
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.hostname != swarm-manager

  database:
    build:
      context: ./database/
    image: 192.168.0.30:5000/lotus/mongo:1.1
    networks:
      - back-net
    volumes:
      - mongo-data:/data/db
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == swarm-worker2

  prometheus:
    build:
      context: ./prometheus/
    image: 192.168.0.30:5000/lotus/prometheus:1.1
    networks:
      - monitoring-net
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - metric-data:/prometheus

  grafana:
    build:
      context: ./grafana/
    image: 192.168.0.30:5000/lotus/grafana:1.1
    networks:
      - monitoring-net
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    ports:
      - 3000:3000

  cadvisor:
    build:
      context: ./cadvisor/
    image: 192.168.0.30:5000/lotus/cadvisor:1.1
    networks:
      - monitoring-net
    deploy:
      mode: global
      labels:
        prometheus-job: cadvisor
    user : root
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - target: 8080
        protocol: tcp
        mode: host
    command: -docker_only

networks:
  front-net:
    driver: overlay
  back-net:
    driver: overlay
  monitoring-net:
    driver: overlay

volumes:
  mongo-data:
  metric-data:

